{"version":3,"file":"static/js/166.257feb7c.chunk.js","mappings":"sRACA,EAA4B,6BAA5B,EAAsE,8BAAtE,EAAiH,8B,SCOpGA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,SAAS,WAAD,wBAAE,WAAOC,EAAP,qFAAiBC,EAAjB,EAAiBA,UACjBJ,EAAoBG,EAApBH,MAAOC,EAAaE,EAAbF,SACV,CAACD,EAAOC,GAAUI,MAAMC,SAFrB,0EAOIZ,EAAaS,GAPjB,uBAMII,EANJ,EAMJC,KAAQD,MANJ,UAQAZ,GAASc,EAAAA,EAAAA,IAASF,IARlB,yBASAZ,GAASe,EAAAA,EAAAA,OATT,yBAUAnB,EAAS,YAAa,CAC1BoB,SAAS,IAXL,QAaNC,EAAAA,GAAAA,QAAA,+FAbM,kDAeNA,EAAAA,GAAAA,MAAA,sKAfM,QAkBRR,EAAU,IAlBF,0DAAF,qDAAC,KAsBX,OACE,+BACE,kBAAMS,UAAWC,EAAaZ,SAAUL,EAAOkB,aAA/C,WACE,kBAAOF,UAAWC,EAAcE,QAAQ,QAAxC,oBAGA,kBACEH,UAAWC,EACXG,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAOM,OAAOH,MACrBuB,UAAQ,KAGV,kBAAOV,UAAWC,EAAcE,QAAQ,WAAxC,uBAGA,kBACEH,UAAWC,EACXG,GAAG,WACHC,KAAK,WACLC,KAAK,OACLC,SAAUvB,EAAOwB,aACjBC,MAAOzB,EAAOM,OAAOF,SACrBsB,UAAQ,KAGV,mBAAQJ,KAAK,SAAb,kDC9DO,SAASK,IAsCtB,OACE,iCACE,wCACA,SAAClC,EAAD","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Form/LoginForm copy/LoginForm.module.css?b236","components/Form/LoginForm copy/LoginForm.js","Pages/LoginPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginForm_loginForm__cGPKp\",\"loginInput\":\"LoginForm_loginInput__R-E63\",\"loginLabel\":\"LoginForm_loginLabel__EnKqk\"};","import { useNavigate } from 'react-router-dom';\nimport { useGetLogInUserMutation } from 'ApiService/UserApi';\nimport { setToken, setLoggedIn } from 'redux/auth-slice';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { toast } from 'react-toastify';\nimport s from './LoginForm.module.css';\n\nexport const LoginForm = () => {\n  const navigate = useNavigate();\n  const [getLogInUser] = useGetLogInUserMutation();\n  const dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    onSubmit: async (values, { resetForm }) => {\n      const { email, password } = values;\n      if (![email, password].every(Boolean)) return;\n\n      try {\n        const {\n          data: { token },\n        } = await getLogInUser(values);\n        await dispatch(setToken(token));\n        await dispatch(setLoggedIn());\n        await navigate('/contacts', {\n          replace: true,\n        });\n        toast.success(`Добро пожаловать`);\n      } catch (err) {\n        toast.error(`\nНе правильный пароль или логин`);\n      }\n      resetForm({});\n    },\n  });\n\n  return (\n    <>\n      <form className={s.loginForm} onSubmit={formik.handleSubmit}>\n        <label className={s.loginLabel} htmlFor=\"email\">\n          Email\n        </label>\n        <input\n          className={s.loginInput}\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          value={formik.values.email}\n          required\n        />\n\n        <label className={s.loginLabel} htmlFor=\"Password\">\n          Password\n        </label>\n        <input\n          className={s.loginInput}\n          id=\"Password\"\n          name=\"password\"\n          type=\"text\"\n          onChange={formik.handleChange}\n          value={formik.values.password}\n          required\n        />\n\n        <button type=\"submit\">Войти</button>\n      </form>\n    </>\n  );\n};\n","// import { useNavigate } from 'react-router-dom';\n// import { useGetLogInUserMutation } from 'ApiService/UserApi';\n// import { setToken, setLoggedIn } from 'redux/auth-slice';\n// import { useState } from 'react';\n// import { useDispatch } from 'react-redux';\nimport { LoginForm } from 'components/Form/LoginForm copy/LoginForm';\n\nexport default function LoginPage() {\n  // const navigate = useNavigate();\n  // const [getLogInUser] = useGetLogInUserMutation();\n  // const dispatch = useDispatch();\n  // const [password, setPassword] = useState('');\n  // const [email, setEmail] = useState('');\n  // const handleChange = e => {\n  //   const { name, value } = e.target;\n  //   switch (name) {\n  //     case 'password':\n  //       setPassword(value.trim());\n  //       break;\n  //     case 'email':\n  //       setEmail(value);\n  //       break;\n  //     default:\n  //       return;\n  //   }\n  // };\n  // const reset = () => {\n  //   setEmail('');\n  //   setPassword('');\n  // };\n  // const handleSubmit = async e => {\n  //   e.preventDefault();\n  //   const { data, error } = await getLogInUser({ email, password });\n  //   if (data) {\n  //     await dispatch(setToken(data?.token));\n  //     await dispatch(setLoggedIn());\n  //     await navigate('/contacts', {\n  //       replace: true,\n  //     });\n  //   }\n  //   if (error) {\n  //     alert('Не правильный пароль или логин!');\n  //   }\n  //   reset();\n  // };\n  return (\n    <>\n      <h1>LoginPage </h1>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["LoginForm","navigate","useNavigate","useGetLogInUserMutation","getLogInUser","dispatch","useDispatch","formik","useFormik","initialValues","email","password","onSubmit","values","resetForm","every","Boolean","token","data","setToken","setLoggedIn","replace","toast","className","s","handleSubmit","htmlFor","id","name","type","onChange","handleChange","value","required","LoginPage"],"sourceRoot":""}